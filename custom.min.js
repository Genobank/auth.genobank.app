const genobank=new GenoBankLogin;genobank.init();let prevButtons={};function startLoadingButton(t){$("#"+t).attr("disabled",!0),prevButtons[t]={prevContent:$("#"+t).html()},$("#"+t).html('\n        <span class="spinner-grow spinner-grow-sm" aria-hidden="true"></span>\n        <span role="status" class="h6">Loading...</span>\n    ')}function stopLoadingButton(t){$("#"+t).attr("disabled",!1),$("#"+t).html(prevButtons[t]?.prevContent)}function showErrorToast(t){$(".toast .toast-body").text(t);let n=$(".toast");new bootstrap.Toast(n).show()}function magicConstructor(){return new Magic(window.MAGIC_API_KEY,{extensions:[new MagicOAuthExtension],network:{rpcUrl:window.RPC_NETWORK,chainId:window.CHAIN_ID}})}async function loginUsingMetamask(){startLoadingButton("id-metamask-button");try{const t=$("#metamaskLoginSpiner");if(void 0===window.ethereum)return showErrorToast("MetaMask is not detected. Please install MetaMask and try again."),void t.hide();let n=new ethers.providers.Web3Provider(window.ethereum);const e=await metamaskLogin(n,window.MESSAGE_TO_SIGN);await finishingLoginProcess(e)}catch(t){stopLoadingButton("id-metamask-button"),showErrorToast("Error: "+t.message)}}async function metamaskLogin(t,n){await window.ethereum.request({method:"eth_requestAccounts"});let e=await t.getSigner().signMessage(n),o=await t.getSigner().getAddress();return{userSignature:e,userWallet:o,isPermittee:!!await genobank.getValidatePermittee(o),loginMethod:"metamask"}}async function loginUsingGoogle(){startLoadingButton("id-google-button");try{let t=magicConstructor();await t.oauth.loginWithRedirect({provider:"google",redirectURI:window.location.protocol+"//"+getCurrentDomainWithPort()+"/oauth-callback.html"})}catch(t){stopLoadingButton("id-google-button"),showErrorToast("Error: "+t.message)}}async function handleOAuthResult(){try{let t=magicConstructor();$("#id-oauth-loading-text").html("Getting user data...");const n=await t.oauth.getRedirectResult();let e=await genobank.getValidatePermittee(n?.magic?.userMetadata?.publicAddress);$("#id-oauth-loading-text").html("Generating signature...");const o={userSignature:await signAndVerify(MESSAGE_TO_SIGN,n?.magic?.userMetadata?.publicAddress),userWallet:n?.magic?.userMetadata?.publicAddress,isPermittee:e,loginMethod:"magic",magicToken:n?.magic?.idToken,email:n?.oauth?.userInfo?.email,name:n?.oauth?.userInfo?.name,picture:n?.oauth?.userInfo?.picture};$("#id-oauth-loading-text").html("Finishing..."),await finishingLoginProcess(o)}catch(t){console.error(t)}}async function loginUsingEmailHandler(){startLoadingButton("id-email-button");try{const t=$("#emailInput").val();await loginUsingEmail(t)}catch(t){console.error("Error in loginUsingEmailHandler:",t),showErrorToast("Error: "+t.message)}finally{stopLoadingButton("id-email-button")}}async function loginUsingEmail(t){try{const n=magicConstructor(),e=await n.auth.loginWithMagicLink({email:t}),o=await n.user.getInfo();let i=await genobank.getValidatePermittee(e?.magic?.userMetadata?.publicAddress);const a={userSignature:await signAndVerify(window.MESSAGE_TO_SIGN,o?.publicAddress),userWallet:o?.publicAddress,isPermittee:!!i,loginMethod:"magic_email",magicToken:e,email:o?.email};await finishingLoginProcess(a)}catch(t){console.error(t)}}async function signAndVerify(t,n){try{if(!n)throw new Error("No account found in localStorage.");const e=magicConstructor(),o=new Web3(e.rpcProvider);if(!await e.user.isLoggedIn())throw new Error("User is not logged in with Magic.");return await o.eth.personal.sign(t,n,"")}catch(t){console.error("Error signing the message:",t)}}async function finishingLoginProcess(t){const n=getConfig();if(console.log(n),n.isPopup)sendToParent(n?.source,t);else{const e=await generateAuthJWT(t),o=new URLSearchParams(window.location.search).get("returnUrl")||n?.source;if(o){const t=o.includes("?")?"&":"?";window.location.href=o+t+"data="+btoa(e?.jwt)}else t.isPermittee?window.location.href="https://genobank.io/consent/lab_biofile/?data="+btoa(e?.jwt):window.location.href="https://genobank.io/consent/biofile/?data="+btoa(e?.jwt)}}function sendToParent(t,n){const e={genobankLogin:n};window.opener.postMessage(e,t),window.close()}async function generateAuthJWT(t){const n=new URL("https://genobank.app/generate_jwt");return fetch(n,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}).then(t=>t.json()).catch(t=>console.error("Error:",t))}function getCurrentDomainWithPort(){const t=window.location;let n=t.hostname;return t.port&&"80"!==t.port&&"443"!==t.port&&(n+=":"+t.port),n}function saveConfig(t){sessionStorage.setItem("data",t)}function getConfig(t=!1){const n=sessionStorage.getItem("data");if(!n)return{};const e=atob(n).replace(/'/g,'"'),o=JSON.parse(e);return!1!==t?o[t]:o}!function(){try{const t=new URLSearchParams(window.location.search),n=t.get("data"),e=t.get("returnUrl");if(e){const t={source:e,isPopup:!1};saveConfig(btoa(JSON.stringify(t).replace(/"/g,"'")))}else n&&saveConfig(n)}catch(t){console.error("Error in initialization:",t)}}(),document.addEventListener("DOMContentLoaded",function(){"/oauth-callback.html"===window.location.pathname&&handleOAuthResult()}),window.finishingLoginProcess=finishingLoginProcess;