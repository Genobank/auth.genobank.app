// Polyfill for Web3Modal
window.process = { env: { NODE_ENV: 'production' } };

// Add error handling for wallet detection
if (typeof window !== 'undefined') {
  // Ensure ethereum object exists even if no wallet is installed
  if (!window.ethereum) {
    window.ethereum = null;
  }

  // Polyfill for injected wallets array
  if (!window.injectedWallets) {
    window.injectedWallets = [];
  }
}

import {
  EthereumClient,
  w3mConnectors,
  w3mProvider,
  WagmiCore,
  WagmiCoreChains,
} from "https://unpkg.com/@web3modal/ethereum@2.7.1";
import { Web3Modal } from "https://unpkg.com/@web3modal/html@2.7.1";
import { Buffer } from 'https://cdn.skypack.dev/buffer';
window.Buffer = window.Buffer || Buffer;

const { mainnet, polygon, avalanche, arbitrum } = WagmiCoreChains;
const { configureChains, createConfig, signMessage, getAccount, disconnect } = WagmiCore;
const chains = [mainnet, polygon, avalanche, arbitrum];
const projectId = "2faedae5e25139c05cb092e6c098a44c";

// Wrap config creation in try-catch
let wagmiConfig;
try {
  wagmiConfig = createConfig({
    autoConnect: true,
    connectors: w3mConnectors({ chains, version: 2, projectId }),
    publicClient: configureChains(chains, [w3mProvider({ projectId })]).publicClient,
  });
} catch (error) {
  console.warn('WalletConnect initialization warning:', error);
  // Create minimal config if full config fails
  wagmiConfig = createConfig({
    autoConnect: false,
    connectors: [],
    publicClient: configureChains(chains, [w3mProvider({ projectId })]).publicClient,
  });
}

const options = {
  projectId,
  privacyPolicyUrl: 'https://genobank.io/privacy-policy',
  themeMode: 'light',
  walletImages: { safe: "https://genobank.io/images/GenoBank.io_logo@2x.svg" }
}

let web3Modal;
try {
  web3Modal = new Web3Modal(
    options,
    new EthereumClient(wagmiConfig, chains)
  );
} catch (error) {
  console.warn('Web3Modal initialization warning:', error);
}

const subscribeToDisconnect = (account) => {
  if (account && account.connector) {
    account.connector.on('disconnect', () => {
      onDisconnectWallet();
    });
  }
};

const logginUsingWalletConnect = async () => {
  if (!web3Modal) {
    console.error('Web3Modal not initialized');
    return;
  }

  try {
    await web3Modal.openModal();
    web3Modal.subscribeModal(({ open }) => {
      if (!open) {
        console.log("Closed modal");
      }
    });

    while (getAccount().isConnecting) {
      await new Promise((resolve) => setTimeout(resolve, 1000));
    }

    const account = getAccount();
    if (!account.connector) return console.error('Cant get the connector.');
    subscribeToDisconnect(account);

    try {
      const signature = await signMessage({ message: "I want to proceed" });
      const genoBankLogin = {
        userSignature: signature,
        userWallet: account.address,
        loginMethod: 'wallet_connect',
      }
      finishingLoginProcess(genoBankLogin)
    } catch (error) {
      console.error('Error al firmar el mensaje:', error);
    }
  } catch (error) {
    console.error('WalletConnect error:', error);
  }
};

const disconnectWallet = async () => {
  try {
    await disconnect();
    localStorage.removeItem("user_wallet");
    localStorage.removeItem("user_sign");
    localStorage.removeItem("login_method");
    location.reload()
  } catch (error) {
    console.error('Error al desconectar la wallet:', error);
  }
};

function onDisconnectWallet() {
  localStorage.clear()
  location.reload();
}

async function walletConnectSignMessage (message) {
  const account = getAccount();
  if (!account.isConnected) {
    if (!web3Modal) {
      console.error('Web3Modal not initialized');
      return;
    }
    await web3Modal.openModal();
    while (getAccount().isConnecting) {
      await new Promise((resolve) => setTimeout(resolve, 1000));
    }
  }

  try {
    const signature = await signMessage({ message });
    return signature;
  } catch (error) {
    console.error('Error al firmar el mensaje:', error);
    throw error;
  }
};

// Initialize only if wallets are available
(async () => {
  try {
    while (getAccount().isReconnecting) {
      await new Promise((resolve) => setTimeout(resolve, 1000));
    }

    const account = getAccount();
    if (account && account.isConnected) {
      subscribeToDisconnect(account);
    }
  } catch (error) {
    console.warn('Wallet connection check:', error);
  }
})();

window.disconnectWallet = disconnectWallet;
window.logginUsingWalletConnect = logginUsingWalletConnect;
window.walletConnectSignMessage = walletConnectSignMessage;