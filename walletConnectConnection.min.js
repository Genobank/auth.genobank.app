window.process = { env: { NODE_ENV: 'production' } };
import {
  EthereumClient,
  w3mConnectors,
  w3mProvider,
  WagmiCore,
  WagmiCoreChains,
} from "https://unpkg.com/@web3modal/ethereum@2.7.1";
import { Web3Modal } from "https://unpkg.com/@web3modal/html@2.7.1";
import { Buffer } from 'https://cdn.skypack.dev/buffer';
window.Buffer = window.Buffer || Buffer;
const { mainnet, polygon, avalanche, arbitrum } = WagmiCoreChains;
const { configureChains, createConfig, signMessage, getAccount, disconnect } = WagmiCore;
const chains = [mainnet, polygon, avalanche, arbitrum];
const projectId = "2faedae5e25139c05cb092e6c098a44c";
const wagmiConfig = createConfig({
  autoConnect: true,
  connectors: w3mConnectors({ chains, version: 2, projectId }),
  publicClient: configureChains(chains, [w3mProvider({ projectId })]).publicClient,
});
const options = {
  projectId,
  privacyPolicyUrl: 'https://genobank.io/privacy-policy',
  themeMode: 'light',
  walletImages: { safe: "https://genobank.io/images/GenoBank.io_logo@2x.svg" }
}
const web3Modal = new Web3Modal(
  options,
  new EthereumClient(wagmiConfig, chains)
);
const subscribeToDisconnect = (account) => {
  if (account.connector) {
    account.connector.on('disconnect', () => {
      onDisconnectWallet();
    });
  }
};

const logginUsingWalletConnect = async () => {
  await web3Modal.openModal();
  web3Modal.subscribeModal(({ open }) => {
    if (!open) {
      console.log("Closed modal");
    }
  });
  while (getAccount().isConnecting) {
    await new Promise((resolve) => setTimeout(resolve, 1000));
  }
  const account = getAccount();
  if (!account.connector) return console.error('Cant get the connector.');
  subscribeToDisconnect(account);
  try {
    const signature = await signMessage({ message: "I want to proceed" });
    const genoBankLogin = {
      userSignature: signature,
      userWallet: account.address,
      loginMethod: 'wallet_connect',
    }
    finishingLoginProcess(genoBankLogin)
  } catch (error) {
    console.error('Error al firmar el mensaje:', error);
  }
};

const disconnectWallet = async () => {
  try {
    await disconnect();
    localStorage.removeItem("user_wallet");
    localStorage.removeItem("user_sign");
    localStorage.removeItem("login_method");
    location.reload()
  } catch (error) {
    console.error('Error al desconectar la wallet:', error);
  }
};

function onDisconnectWallet() {
  localStorage.clear()
  location.reload();
}

async function walletConnectSignMessage (message) {
  const account = getAccount();
  if (!account.isConnected) {
    await web3Modal.openModal();
    while (getAccount().isConnecting) {
      await new Promise((resolve) => setTimeout(resolve, 1000));
    }
  }

  try {
    const signature = await signMessage({ message });
    return signature;
  } catch (error) {
    console.error('Error al firmar el mensaje:', error);
    throw error;
  }
};



while (getAccount().isReconnecting) {
  await new Promise((resolve) => setTimeout(resolve, 1000));
}

const account = getAccount();
if (account.isConnected) {
  subscribeToDisconnect(account);
}

window.disconnectWallet = disconnectWallet;
window.logginUsingWalletConnect  = logginUsingWalletConnect;
window.walletConnectSignMessage = walletConnectSignMessage;

